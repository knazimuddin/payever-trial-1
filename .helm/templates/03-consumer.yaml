{{ $chartName := .Chart.Name }}
{{ $values := .Values }}
{{ $appName := printf "%s-consumer" $chartName }}

apiVersion: apps/v1
{{- if eq $values.namespace "production" }}
kind: DaemonSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: {{ $appName }}
  namespace: {{ $values.namespace }}

  labels:
    app: {{ $appName }}
    tier: nodejs
    type: consumer

  annotations:
    "werf.io/set-replicas-only-on-creation": "true"

spec:
  {{- if ne $values.namespace "production" }}
  replicas: {{ $values.replicas.consumer }}

  strategy:
    type: RollingUpdate

    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  {{- end }}
  selector:
    matchLabels:
      app: {{ $appName }}

  template:
    metadata:
      labels:
        app: {{ $appName }}
        tier: nodejs
        type: consumer

      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'

    spec:
      priorityClassName: {{ $values.priorityClass }}

      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node_worker
                operator: Exists
              - key: node_high
                operator: Exists

      imagePullSecrets:
        - name: {{ $values.image.pullSecretName }}

      containers:
        - name: node
          image: {{ $values.image.nodejs }}
          imagePullPolicy: IfNotPresent
          command: [ "/bin/bash", "-c", "/payever/deploy/consumer.sh" ]

          livenessProbe:
            httpGet:
              path: /api/status
              port: {{ $values.service.statusPort }}
            initialDelaySeconds: 150
            periodSeconds: 30
            timeoutSeconds: 3
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /api/status
              port: {{ $values.service.statusPort }}
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 15

          resources:
{{ toYaml $values.resources | indent 12 }}

          envFrom:
            - configMapRef:
                name: {{ $chartName }}
            - configMapRef:
                name: micro-url-map
            - secretRef:
                name: {{ $chartName }}

          env:
            - name: KUBERNETES_DEPLOYED
              value: "{{ now }}"
